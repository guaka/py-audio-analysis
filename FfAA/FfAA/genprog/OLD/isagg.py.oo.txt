#! /usr/bin/env python2.2

import random
import copy
from Numeric import *

from data_structures import *
from functions import *


class Pool(list):
	"""
	>>> p = Pool("aaa bbb ccc ddd ccc ddd aaa bbb ", poolsize = 20)

	>> > len(p)
	20
	"""
	def __init__(self,
				 string,
				 poolsize = 40,
				 survive_rate = 0.8,
				 mutate_rate = 0.8,
				 crossover_rate = 0.1,
				 debug = 0):

		self.debug = debug
		self.number_of_survivors = int(survive_rate * poolsize + 0.5)
		self.mutate_rate = mutate_rate
		self.crossover_rate = crossover_rate
		self.generation = 0
		
		while len(self) < poolsize:
			self.append(buildstruct(string))


	def nextGeneration(self, debug = 0):
		self.generation += 1
		self.nextGenerationActions()
		if debug:
			print self.generation
			show(self)

	def nextGenerationActions(self):
		pass

	def _pick_randomly(self, number):
		picks = []
		while number > 0:
			picks.append(self[random_int(self)])
			number -= 1
		return picks

	def show(self):
		for p in self:
			print p.complexity(), p

def runGenGA(string, iter = 30):
	g = GenGA(string)
	for i in range(iter):
		g.nextGeneration(1)


class GenGA(Pool):
	"""Generational GA with roulette-wheel selection.
	
	>>> g = GenGA("aaaa bbbb")
	>>> orig = copy.deepcopy(g); g == orig
	1
	>>> g.makeSelection()
	>>> len(g) > 0 #nothing selected?
	1
	>>> #g == orig #selection
	>>> g.applyCrossovers()
	>>> len(g) >= 8  #something left from crossover?
	1
	>>> g.applyMutations()
	>>> len(g) >= 8
	1
	>>> g.nextGenerationActions()
	"""

	def nextGenerationActions(self):
		self.makeSelection()
		self.applyCrossovers()
		self.applyMutations()
		self.optimize()

	def optimize(self):
		for code in self:
			for child in shuffle(code.all_children()):
				optimized = child.optimize()
				if optimized:
					child = optimized
				
	def makeSelection(self):
		complexities = array(map(lambda code: code.complexity(), self))
		fitnesses = max(complexities) - complexities + 1
		max_fitness = max(fitnesses)
		for (code, fitness) in map(None, self, fitnesses):
			code.fitness = fitness

		survivors = []
		fitnesses = list(fitnesses)
		for code in self:
			if code.fitness == max_fitness:
				self.remove(code)
				survivors.append(code)

		fitnesses = map(lambda code: code.fitness, self)

		while len(survivors) < self.number_of_survivors:
			cum_fitnesses = cumsum(fitnesses)
			val = random_int(cum_fitnesses[-1])
			chosen = argmin(less(val, cum_fitnesses))
			fitnesses.remove(fitnesses[chosen])
			survivors.append(self[chosen])
			self.remove(self[chosen])

		while len(self):
			self.pop()
		for code in survivors:
			self.append(code)

	def applyCrossovers(self):
		crossover_group = []

		for code in shuffle(self):
			if random.random() < self.crossover_rate:
				crossover_group.append(code)

		if self.debug:
			show(crossover_group)

		for counter in range(len(crossover_group) - 1):
			code1, code2 = crossover_group[counter], crossover_group[counter+1]
			
			self.append(copy.copy(code1))
			self.append(copy.copy(code2))
			for node1 in shuffle(code1.all_children()):
				for node2 in shuffle(code2.all_children()):
					if node1.string() == node2.string():
						node1, node2 = node2, node1
		if self.debug:
			show(self)

	def applyMutations(self):
		for code in self:
   			if random.random() < self.mutate_rate:
				self.append(copy.copy(code))
				subtree = code.random_subtree()
				subtree = buildstruct(subtree.string())

	def optimize(self):
		pass



def buildstruct(p):
	"""
	>>> l = buildstruct("abcdefgh")
	>>> l.string()
	'abcdefgh'
	>>> l = buildstruct([1, 2, 3, 4, 5])
	>>> #l
	>>> l.string()
	'[1][2][3][4][5]'
	"""
	if len(p) > 1:
		t1, t2 = map(buildstruct, split_randomly(p))
		return combine_trees(t1, t2)
	else:
		return LLP(p)

def combine_trees(t1, t2):
	"""
	>>> t1 = buildstruct("".join(map(chr, range(65, 80))))
	>>> t2 = buildstruct("".join(map(chr, range(65, 70)) * 3))
	>>> combine_trees(t1, t2).string()
	'ABCDEFGHIJKLMNOABCDEABCDEABCDE'
	"""
	operators = [Iter, SymOdd, SymEven, AltRight, AltLeft, Con]
	found = 0
	while not found:
		found = pick_random(operators).check(t1, t2)
	return found

def _test():
	import doctest
	import isagg
	return doctest.testmod(isagg)

if __name__ == "__main__":
	_test()