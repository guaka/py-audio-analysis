#!/usr/bin/env python
#
# generated by wxGlade 0.2.1 on Mon Apr 21 18:20:18 2003
# then further treated by Kasper.Souren@ircam.fr

#
# scipy needs to be imported before wxPython!
from scipy import *

from wxPython.wx import *
from chaco.wxplot import *

from wxPython.lib.PyCrust import shell, version

#
#
import Structures
Structure = Structures
	

name_full = "Analyser of Musical Pieces"
name_abbrev = "AMP"

PyCrust_IntroText = name_full + """
This is the PyCrust shell.
"""


if sys.version_info[0] < 2:
	print "You're working with Python 1.x. Expect a lot of troubles!"
elif sys.version_info[1] < 2:
	print "You're working with a Python version below 2.2. Expect troubles!"
elif sys.version_info[2] < 2:
	False = 0
	True = 1



class MyTreeCtrl(wxTreeCtrl):
	def __init__(self, *args, **kwds):
		tID = args[1]
		wxTreeCtrl.__init__(self, *args, **kwds)

		self.root = self.AddRoot("The Root Item")
		EVT_TREE_SEL_CHANGED(self, tID, self.OnSelChanged)

	def OnSelChanged(self, event):
		self.item = event.GetItem()
		self.object = self.GetPyData(self.item)

		self.DeleteChildren(self.item)

		if hasattr(self.object, "children"):
			for p in self.object.children:
				self.add_object(self.item, p)


	def add_structures(self, structures = None):
		structures = structures or self.structures
		self.structures = structures
		self.DeleteChildren(self.root)
		for structure in structures:
			self.add_structure(structure)
		self.Expand(self.root)

	def add_structure(self, structure):
		node = self.AppendItem(self.root, structure.source.name)
		self.SetPyData(node, structure)

	def add_object(self, parent, object):
		node = self.AppendItem(parent, object.__class__.__name__)
		self.SetPyData(node, object)




class MyFrame(wxFrame):
	def __init__(self, *args, **kwds):
		kwds["style"] = wxDEFAULT_FRAME_STYLE
		# print args, kwds
		wxFrame.__init__(self, *args, **kwds)

		self.window = wxSplitterWindow(self, -1)
		self.upper_window = wxSplitterWindow(self.window, -1)
		self.window_pane_1 = wxPanel(self.upper_window, -1)

		self.shell = shell.Shell(self.window, -1, introText = PyCrust_IntroText)

		self.__menu_bar()
		
		self.plotcanvas = PlotCanvas([2, 3, 4, 5])
		self.plotwindow = PlotWindow(self.upper_window, -1)
		self.plotwindow.add(self.plotcanvas)
		self.upper_window.SplitVertically(self.window_pane_1, self.plotwindow, 200)
		self.window.SplitHorizontally(self.upper_window, self.shell, -100)

		self.tree_of_structures = MyTreeCtrl(self.window_pane_1,
											 -1,
											 wxPoint(0, 0),
											 wxSize(500, 1000),
											 wxTR_HAS_BUTTONS | wxTR_HIDE_ROOT)
		self.tree_of_structures.parent_frame = self
		self.statusbar = self.CreateStatusBar()
		self.statusbar.SetStatusText("test")

	def __menu_bar(self):
		menuBar = wxMenuBar()
		menuFile = wxMenu()

		ID_EXIT = 110

		ID_FILE = 101
		ID_ABOUT = 102
		ID_RECALC = 103

		ID = 120

		menuFile.Append(ID_EXIT, "E&xit\tAlt-X", "Exit demo")
		menuBar.Append(menuFile, "&File")
		EVT_MENU(self, ID_EXIT, self.OnMenuQuit)
		
		menuFile.Append(ID_FILE, "A&dd file\tAlt-D", "Add file")
		EVT_MENU(self, ID_FILE, self.OnMenuAddFile)

		menuFile.Append(ID_RECALC, "&Recalculate\tAlt-R", "Add file")
		EVT_MENU(self, ID_RECALC, self.OnMenuRecalculate)

		menuFile.Append(ID + 1, "&Show\tAlt-S", "Show object")
		EVT_MENU(self, ID + 1, self.OnMenuShow)

		menuFile.Append(ID + 0, "&Listen\tAlt-L", "Listen")
		EVT_MENU(self, ID + 0, self.OnMenuListen)

		menuHelp = wxMenu()
		menuHelp.Append(ID_ABOUT, "&About\tAlt-A", "About")
		menuBar.Append(menuHelp, "&Help")
		EVT_MENU(self, ID_ABOUT, self.OnMenuAbout)

		self.SetMenuBar(menuBar)


	def OnMenuQuit(self, event):
		self.Close(True)

	def OnMenuAddFile(self, event):

		wildcard = "ogg files (*.ogg)|*.ogg|" \
				   "mp3 files (*.mp3)|*.mp3|" \
				   "wav files (*.wav)|*.wav|" \
				   "All files (*.*)|*.*"

		dlg = wxFileDialog(self,
						   message = 'Choose a file',
						   defaultDir = '',
						   wildcard = wildcard,
						   style = wxOPEN | wxMULTIPLE | wxCHANGE_DIR)

		if dlg.ShowModal() == wxID_OK:
			filepaths = dlg.GetPaths()
			for filepath in filepaths:
				print filepath
				Structure.init.add_files(filepath)
			self.tree_of_structures.add_structures()

		dlg.Destroy()

	def OnMenuAbout(self, event):
		dlg = wxMessageDialog(self,
							  (name_full + '\n\n' + 
							   'This is a wxPython viewer for the Structure database\n' + 
							   'Written in Python, with the help of many libraries\n\n' + 
							   'by Kasper.Souren@ircam.fr'),
							  name_abbrev + ' wxViewer',
							  wxOK | wxICON_INFORMATION)
							  #wxYES_NO | wxNO_DEFAULT | wxCANCEL | wxICON_INFORMATION)
		dlg.ShowModal()
		dlg.Destroy()

	def OnMenuRecalculate(self, event):
		if hasattr(self.tree_of_structures.object, "reinit"):
			self.tree_of_structures.object.reinit()
		self.tree_of_structures.add_structures()

	def OnMenuShow(self, event):
		self.show_object(self.tree_of_structures.object)

	def OnMenuListen(self, event):
		self.listen_object(self.tree_of_structures.object)

	def show_object(self, object):
		if hasattr(object, "show"):
			data = hasattr(object, "feature_vectors") and object.feature_vectors
			if len(shape(data)) == 1:
				self.plotcanvas.values[0].data = data
				self.plotwindow.update()
			else:
				object.show()

	def listen_object(self, object):
		if hasattr(object, "source"):
			object.source.listen()



class MyApp(wxApp):
	def OnInit(self):
		wxInitAllImageHandlers()
		self.frame = MyFrame(parent = None,
							 id = -1,
							 title = name_full + " - wxPython viewer",
							 pos = wxPoint(30, 30),
							 size = wxSize(860, 600))
		self.SetTopWindow(self.frame)
		self.frame.Show(True)
		return True

app = None


def main():
	global app
	
	app = MyApp()
	if not Structure.structures is None:
		if hasattr(app.frame, "tree_of_structures"):
			app.frame.tree_of_structures.add_structures(Structure.structures)
		app.MainLoop()
	else:
		print "Cannot do useful stuff."


if __name__ == "__main__":
	main()
	


